
（1）创建一个Rodent(啮齿动物)：mouse（老鼠）,Gerbil（鼹鼠）,hamster(大颊鼠)等这样继承层次结构。
在基类中，提供所有Rodent都通用的方法。在子类中，根据特定的动物覆盖这些方法，以便不同动物执行不同的行为。
创建一个Rodent数组，填充不同的Rodent子类型，然后调用基类的方法。观察调用结果。


(2)创建一个保护两个方法的基类，第一个方法中可以调用第二个方法。
然后创建一个继承于该类的子类，而且覆盖子类中的第二个方法。 为子类创建一个对象，并将它向上转型到基类类型后调用第一个方法。你发现了什么？
总结一下你对这个demo程序的理解。


class A {
	protected void f() { 
		System.out.println("A.f()");
		this.g(); 
	}
	protected void g() {
		System.out.println("A.g()"); 
	}
}

class B extends A {
	@Override protected void g() {
		System.out.println("B.g()");
	}
}

public class MyDeom5 {
	public static void main(String[] args) {
		B b = new B();
		// automatic upgrade to base-class to call base-class method A.f()
		// which,by polymorphism, will call the derived-class method B.g():
		b.f();
                //A.f()
                //B.g()
	}
}