1:什么是多线程?
答：线程是指程序的一个指令执行序列，是程序使用cpu的基本单位，是是进程中单个顺序控制流（执行路径），是一条单独执行的路径。win32平台支持多线程程序，允许程序中存在多个线程。在单cpu系统中，系统吧cpu的时间片按照调度算法分配各个线程，因此各线程实际上是分时执行的，在多 CPU 的 Windows NT 系统中， 同一个程序的不同线程可以被分配到不同的 CPU 上去执行。


2:有几种方式可以实现多线程? 谈谈你对这两种实现方式的认识。
答：两种
一种是extends Thread类，重写run（）方法，另一种是implements runnable接口，实现run（）方法

两种方法相比来说，第二种解决了java语言中的单继承的局限性，除此之外还可以实现多线程之间共享数据

3:如何获取和设置线程名称?
答：获取Thread.currentThread（）.getName()
设置线程名称 Thread t = new Thread();  t.setName("线程名");

4:线程的常见方法?
答：getName（）返回该线程的名称
getPriority() 返回线程的优先级
getState() 返回线程的状态
interrupt（） 中断线程
join（） 等待该线程终止
setName（String name） 改变线程名称，使之与参数name相同
setDaemon（boolean on）将该线程标记为守护线程或者用户线程
setPriority（） 更改线程的优先级
sleep（long millis）在指定的毫秒数内让当前正在执行的线程休眠
start（） 使该线程开始执行，java虚拟机调用该线程的run方法
yield（）暂停该线程正在执行的线程对象，并执行其他线程

5:线程的生命周期图?
(1)生命周期的五种状态

 1，  新建（new Thread）
当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。
例如：Thread  t1=new Thread();

 2， 就绪（runnable）
线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：t1.start();

 3， 运行（running）
线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。

 4， 死亡（dead）
当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。

自然终止：正常运行run()方法后终止

异常终止：调用interrupt()方法让一个线程终止运行

 5， 堵塞（blocked）
由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。

正在睡眠：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。

正在等待：调用wait()方法。（调用motify()方法回到就绪状态）


6:线程安全问题的产生原因?
答：由于一个程序的各线程是在相同的地址空间运行的，因此设及到了如何共享内存， 如何通信等问题，这样便需要处理各线程之间的同步问题

7:如何解决线程安全问题?
答：
   同步代码块格式：Synchronized（对象）{ 	需同步代码块}	
	
8.start方法和run方法的区别？
答：

首先， 之所以出现线程，就是为了更好的利用CPU，让她更加“精明”的干活。 

通过调用Thread类的start()方法来启动一个线程， 
这时此线程是处于就绪状态， 
并没有运行。 
然后通过此Thread类调用方法run()来完成其运行操作的， 
这里方法run()称为线程体， 
它包含了要执行的这个线程的内容， 
Run方法运行结束， 
此线程终止， 
而CPU再运行其它线程， 

而如果直接用Run方法， 
这只是调用一个方法而已， 
程序中依然只有主线程--这一个线程， 
其程序执行路径还是只有一条， 
这样就没有达到写线程的目的。 

记住：线程就是为了更好地利用CPU， 提高程序运行速率的！ 

9.interrupt方法需要如何使用？
答：interrupt（）方法和isinterrupted（）方法一起使用
Thread.interrupt()方法不会中断一个正在运行的线程。它的作用是，在线程受到阻塞时抛出一个中断信号，这样线程就得以退出阻塞的状态，interrupt方法并不是强制终止线程，它只能设置线程的interrupted状态。
如果线程被Object.wait, Thread.join和Thread.sleep三种方法之一阻塞，那么，它将接收到一个中断异常（InterruptedException），从而提早地终结被阻塞状态

10.join方法的意义是什么？
答： 该方法使得子线程能够一直保持执行或者是在限定的时间内始终让该子线程执行，超过时间后，再是异步执行。让多线程之间实现同步执行的一种方式
